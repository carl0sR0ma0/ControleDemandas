// <auto-generated />
using System;
using Api.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251030110907_INIT")]
    partial class INIT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Domain.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Api.Domain.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DemandId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DemandId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Api.Domain.Demand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Classification")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EstimatedDelivery")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid");

                    b.Property<string>("NextActionResponsible")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Observation")
                        .HasColumnType("text");

                    b.Property<int>("OccurrenceType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("ReporterAreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequesterUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Responsible")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SystemVersionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("Protocol")
                        .IsUnique();

                    b.HasIndex("ReporterAreaId");

                    b.HasIndex("RequesterUserId");

                    b.HasIndex("SystemVersionId");

                    b.HasIndex("UnitId");

                    b.ToTable("Demands");
                });

            modelBuilder.Entity("Api.Domain.ModuleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<Guid>("SystemEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SystemEntityId", "Name")
                        .IsUnique();

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Api.Domain.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Active = true,
                            Category = "Dashboard",
                            Code = "AcessarDashboard",
                            Description = "Acesso ao painel principal",
                            Name = "Acessar Dashboard"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            Active = true,
                            Category = "Demandas",
                            Code = "VisualizarDemandas",
                            Description = "Ver lista e detalhes das demandas",
                            Name = "Visualizar Demandas"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            Active = true,
                            Category = "Demandas",
                            Code = "RegistrarDemandas",
                            Description = "Criar novas demandas",
                            Name = "Registrar Demandas"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111114"),
                            Active = true,
                            Category = "Demandas",
                            Code = "EditarStatus",
                            Description = "Alterar status/histórico",
                            Name = "Editar Status"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111115"),
                            Active = true,
                            Category = "Demandas",
                            Code = "EditarDemanda",
                            Description = "Editar informações das demandas",
                            Name = "Editar Demanda"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111116"),
                            Active = true,
                            Category = "Notificações",
                            Code = "NotificarEmail",
                            Description = "Enviar notificações por email",
                            Name = "Notificar Email"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111117"),
                            Active = true,
                            Category = "Sistema",
                            Code = "GerenciarUsuarios",
                            Description = "Criar/editar usuários",
                            Name = "Gerenciar Usuários"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111118"),
                            Active = true,
                            Category = "Sistema",
                            Code = "GerenciarPerfis",
                            Description = "Criar/editar perfis",
                            Name = "Gerenciar Perfis"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111119"),
                            Active = true,
                            Category = "Sistema",
                            Code = "Configuracoes",
                            Description = "Acessar configurações",
                            Name = "Configurações"
                        });
                });

            modelBuilder.Entity("Api.Domain.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("BadgeClass")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Api.Domain.ProfilePermission", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Granted")
                        .HasColumnType("boolean");

                    b.HasKey("ProfileId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ProfilePermissions");
                });

            modelBuilder.Entity("Api.Domain.ProtocolCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LastNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProtocolCounters");
                });

            modelBuilder.Entity("Api.Domain.StatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DemandId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("ResponsibleUser")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DemandId");

                    b.ToTable("StatusHistory");
                });

            modelBuilder.Entity("Api.Domain.SystemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("Api.Domain.SystemVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SystemEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.HasIndex("SystemEntityId", "Version")
                        .IsUnique();

                    b.ToTable("SystemVersions");
                });

            modelBuilder.Entity("Api.Domain.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Api.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ProfileId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 30, 11, 9, 6, 740, DateTimeKind.Utc).AddTicks(3197),
                            Email = "admin@empresa.com",
                            IsSpecial = false,
                            Name = "Administrador",
                            PasswordHash = "$2a$11$H1poKqpbtEKuXkcb/oNlXO7IlXDbrSvGhZrg/u8AI6HHNv.5HJx8a",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 30, 11, 9, 6, 981, DateTimeKind.Utc).AddTicks(652),
                            Email = "gestor@empresa.com",
                            IsSpecial = false,
                            Name = "Gestor",
                            PasswordHash = "$2a$11$u4/tUTd6dB1TQtVRiYhqkePz0soeA2h2JhCtp/AIzUO4e25jrijVq",
                            Role = "Gestor"
                        });
                });

            modelBuilder.Entity("Api.Domain.UserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Granted")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111112"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111113"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111114"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111115"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111116"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111117"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111118"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111119"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111112"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111113"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111114"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111115"),
                            Granted = true
                        },
                        new
                        {
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111116"),
                            Granted = true
                        });
                });

            modelBuilder.Entity("Api.Domain.Attachment", b =>
                {
                    b.HasOne("Api.Domain.Demand", "Demand")
                        .WithMany("Attachments")
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("Api.Domain.Demand", b =>
                {
                    b.HasOne("Api.Domain.ModuleEntity", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.Domain.Area", "ReporterArea")
                        .WithMany()
                        .HasForeignKey("ReporterAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.Domain.User", "RequesterUser")
                        .WithMany()
                        .HasForeignKey("RequesterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.Domain.SystemVersion", "SystemVersion")
                        .WithMany()
                        .HasForeignKey("SystemVersionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Api.Domain.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("ReporterArea");

                    b.Navigation("RequesterUser");

                    b.Navigation("SystemVersion");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Api.Domain.ModuleEntity", b =>
                {
                    b.HasOne("Api.Domain.SystemEntity", "System")
                        .WithMany("Modules")
                        .HasForeignKey("SystemEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("Api.Domain.ProfilePermission", b =>
                {
                    b.HasOne("Api.Domain.PermissionEntity", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Profile", "Profile")
                        .WithMany("Permissions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Api.Domain.StatusHistory", b =>
                {
                    b.HasOne("Api.Domain.Demand", "Demand")
                        .WithMany("History")
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("Api.Domain.SystemVersion", b =>
                {
                    b.HasOne("Api.Domain.SystemEntity", "System")
                        .WithMany("Versions")
                        .HasForeignKey("SystemEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("Api.Domain.User", b =>
                {
                    b.HasOne("Api.Domain.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Api.Domain.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Area");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Api.Domain.UserPermission", b =>
                {
                    b.HasOne("Api.Domain.PermissionEntity", "Permission")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Domain.Demand", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("History");
                });

            modelBuilder.Entity("Api.Domain.PermissionEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Api.Domain.Profile", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Api.Domain.SystemEntity", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Versions");
                });
#pragma warning restore 612, 618
        }
    }
}
